apply plugin: 'com.android.application'

Integer releaseTime() {
    def versionCodeFile = file(project.rootDir.getPath() + "/app/version.properties")
    Properties properties = new Properties()
    def inputStream = new FileInputStream(versionCodeFile)
    properties.load(inputStream)
    String property = properties.get("VERSION_CODE")
    Integer current = Integer.parseInt(property)
    def runTasks = gradle.startParameter.taskNames
    def task = ':app:assembleRelease'
    if (task in runTasks) {
        current += 1
        properties.put("VERSION_CODE", current.toString())
        properties.store(versionCodeFile.newWriter(), null)
    }
    inputStream.close()
    return current
}

android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion localBuildToolsVersion
    defaultConfig {
        applicationId "com.lead.model.app"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode releaseTime()
        versionName "1.21.07"

        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters "armeabi", "armeabi-v7a"
        }
    }
    buildTypes {
        debug {
//            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            //给applicationId添加后缀“.debug”
//            applicationIdSuffix ".debug"
            zipAlignEnabled false
            shrinkResources false
            minifyEnabled false
            debuggable true
        }
        release {
//            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //是否zip对齐
            zipAlignEnabled false
            // 缩减resource文件
            shrinkResources false
            //Proguard
            minifyEnabled false
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        disable 'MissingTranslation'
    }

//    buildFeatures {
//        dataBinding = true
//    }
    applicationVariants.all { variant ->
        variant.outputs.all {
            def fileName
            def date = new Date()
            def formattedDate = date.format('yyyyMMdd')
            if (variant.buildType.name == 'release') {
                fileName = "${"FramePath"}_${variant.mergedFlavor.versionName}_${formattedDate}_${variant.versionCode}.apk"
            } else if (variant.buildType.name == 'debug') {
                fileName = "${"FramePath-DEBUG"}_${variant.mergedFlavor.versionName}_${formattedDate}_${variant.versionCode}.apk"
            }
            outputFileName = fileName
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api deps.support.app_compat
    api deps.support.v4
    api deps.support.v13
    api deps.support.design
    api deps.support.cardview
    api deps.support.percent
    api deps.support.recyclerview
    //view
    api deps.constraint_layout
    api deps.photo_view
    api deps.easy_recycler
    api deps.material_dialog
    // RxJava and retrofit
    api deps.rx_android
    api deps.rxjava2
    api deps.retrofit.runtime
    api deps.retrofit.gson
    //Dagger
    api deps.dagger.runtime
    api deps.dagger.android
    api deps.dagger.android_support
    //annotationProcessor
    annotationProcessor deps.dagger.android_support_compiler
    annotationProcessor deps.dagger.compiler
    // other
    api deps.kotlin.stdlib
    api deps.event_bus
    api deps.gson
    api deps.toasty
    api deps.logger
    api deps.permission
    api deps.utils
    api deps.glide
    api deps.arouter_api
    api deps.persistent_cookie
    implementation deps.fastjson
    implementation deps.xlog
    api deps.butterknife
    annotationProcessor deps.compiler_butterknife
    implementation deps.aliyun
}